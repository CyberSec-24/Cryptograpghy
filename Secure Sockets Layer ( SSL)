The Secure Sockets Layer (SSL) protocol is an application layer protocol developed by Netscape for managing the security of message transmission on the Internet.

It is used to provide a secure authentication mechanism between two communicating applications, such as a client and a server. 

SSL requires a reliable transport protocol, such as TCP, for data transmission and reception. 

It uses RSA asymmetric (public-key) encryption to encrypt data transferred over SSL connections.

Any application-layer protocol that is higher than SSL, such as HTTP, FTP, and telnet, can form a transparent layer over SSL. 

SSL acts as an arbitrator between the encryption algorithm and the session key; it also verifies the destination server prior to the transmission and reception of data.

SSL encrypts the complete data of the application protocol to ensure security

SSL also offers “channelsecurity” with three basic properties: 
▪ Private channel – All the messages are encrypted after a simple handshake is used to define a secret key.

▪ Authenticated channel – The server endpoint of the conversation is always encrypted, whereas the client endpoint is optionally authenticated.

▪ Reliable channel – Message transfer has an integrity check.

SSL uses both asymmetric and symmetric authentication mechanisms. Public-key encryption verifies the identities of the server, the client, or both.

Once authentication has occurred, the client and server can create symmetric keys, allowing them to communicate and transfer data rapidly. 

An SSL session is responsible for carrying out the SSL handshake protocol to organize the states of the server and clients, thus ensuring consistency of the protocol.




SSL Handshake Protocol Flow
The SSL handshake protocol works on top of the SSL record layer. The processes executed in the three-way handshake protocol are as follows:

1. The client sends a hello message to the server, to which the server must respond with a hello message, or the connection will fail due to the occurrence of a fatal error.
The attributes established due to the server and client hello are protocol version, session ID, cipher suite, and compression method.

2. After the connection is established, the server sends a certificate to the client for authentication.
In addition, the server might send a server-key exchange message. On authentication of the server, 
it may ask the client for the certificate (if appropriate for the cipher suite selected).

3. The server sends a “hello done” message to inform the client that the handshake phase is complete and waits for the client’s response

4. If the client receives a certificate-request message, the client must respond to the message by sending a certificate message or “no certificate” alert. 
The server sends the client key-exchange message. The content of the message depends on the public-key algorithm between the server hello and the client hello. 
If the certificate sent by the client has signing ability, a digitally signed certificate verifies the message, and the client transmits it.

5. The client transmits the changed cipher-spec message and copies the pending cipher spec into the current cipher spec.
The client sends a message to initiate the completion of the message under the new algorithm, keys, and secrets.

6. In response, the server replies by sending its own changed cipher-spec message, transfers the pending cipher spec to the current cipher spec, and initiates the completion of the message under the new cipher spec. 
At this point, the handshake is complete and the server starts exchanging the application-layer data.














